{
    "docs": [
        {
            "location": "/", 
            "text": "Summary\n\n\n\n\nDay 1: \nBackBee standard edition installation and first contribution\n.\n\n\nDay 2: \nSite conception and BackBee content management\n\n\nDay 3: \nContentType and template with render modes\n\n\nDay 4: \nBackBee Edition mode\n\n\nDay 5: Simple bundle + load existent bundles (comment bundle).\n\n\nDay 6: Advanced bundle part 1 Bundle conception (user contribution bundle).\n\n\nDay 7: Advanced bundle part 2 Creation of contributor model and extend BBUser.\n\n\nDay 8: Advanced bundle part 3 Event listener link user to class content article.\n\n\nDay 9: Advanced bundle part 4 Custom user template public/private profile + routing.\n\n\nDay 10: Advanced bundle part 5 Authentication manager and firewalls.\n\n\nDay 11: Advanced bundle part 6 User roles.\n\n\nDay 12: Advanced bundle part 7 Customize contributor toolbar.", 
            "title": "Summary"
        }, 
        {
            "location": "/#summary", 
            "text": "Day 1:  BackBee standard edition installation and first contribution .  Day 2:  Site conception and BackBee content management  Day 3:  ContentType and template with render modes  Day 4:  BackBee Edition mode  Day 5: Simple bundle + load existent bundles (comment bundle).  Day 6: Advanced bundle part 1 Bundle conception (user contribution bundle).  Day 7: Advanced bundle part 2 Creation of contributor model and extend BBUser.  Day 8: Advanced bundle part 3 Event listener link user to class content article.  Day 9: Advanced bundle part 4 Custom user template public/private profile + routing.  Day 10: Advanced bundle part 5 Authentication manager and firewalls.  Day 11: Advanced bundle part 6 User roles.  Day 12: Advanced bundle part 7 Customize contributor toolbar.", 
            "title": "Summary"
        }, 
        {
            "location": "/day1/", 
            "text": "Day 1 : Project start\n\n\nIntroduction\n\n\nBackBee\n is an open source Content Management System (CMS) project built on top of Symfony Components and Doctrine 2.\n\n\nThis tutorial describes the creation of real web application, we will say more on day 2 about the application and features we expect to be implemented.\nThis kind of site is very popular and very easy to build with BackBee CMS, for instance you should take a look at \nMedium\n.\n\n\nThis goal is to demonstrate that BackBee can be used to make websites with style and little efforts.\n\n\nEach day of this tutorial is meant to last between one and two hours, and will be the occasion to learn BackBee by coding a real website, from start to finish. Every day, new features will be added to the application, and we'll take advantage of this development to introduce you to new BackBee functionalities as well as good practices in web development.\n\n\nThis tutorial is also inspired by the \nso famous Jobeet\n, the book to learn \nsymfony 1\n which describes how to build a business jobs application.\n\n\nWhat for today?\n\n\nThe objective of this day is to setup the environment and install the CMS. At the end of the day we expect to see the \"Hello world\" from BackBee.\n\n\nWe assume you have basic knowledge of PHP5, Apache or Nginx and MySQL.\n\n\nPrerequisites\n\n\nBefore installing BackBee, you need to check you have everything installed and configured correctly. You should really care about this first day and follow all the steps required to check your configuration, this may easy your days further down the road.\n\n\nThird party Software\n\n\nFirst of all, you need to check that your computer has a friendly working environment for web development. At a minimum, you need a web server (Apache, for instance), a database engine (MySQL, PostgreSQL, SQLite, or any PDO-compatible database engine), and \nPHP 5.4\n or later.\n\n\nAt least, you need to install \ngit\n.\n\n\nAlso, you will need to install \nComposer\n the dependency manager for PHP.\n\n\nFollow this link to install it if your are on \nLinux/Unix based OS\n (like ubuntu or Mac OS X), Composer is also available on \nWindows system\n.\n\n\nIn a command line interface, check if \ncomposer\n is correctly installed:\n\n\n\n\nAlso, check your PHP version which should be 5.4 or greater.\n\n\n\n\nEventually, you need to set up a domain name in your operating system.\nOn Unix/Linux based OS, you can add it into \n/etc/hosts\n file, we will choose \nblogbee.dev\n:\n\n\n127.0.0.1   blogbee.dev\n\n\n\nPHP extensions and configuration\n\n\nYou need to activate \nmbstring\n, \npdo_mysql\n and \npdo_sqlite\n extensions.\nThen you also need to set a correct date.timezone in your \nphp.ini\n configuration file:\n\n\n[Date]\ndate.timezone=Europe/Paris\n\n\n\nOk ! We can now launch the installation process.\n\n\nInstallation\n\n\nOpen a command line interface and get BackBee:\n\n\n$ composer create-project \"backbee/backbee-standard\" /path/to/your/folder \"1.0\" -n\n\n\n\nThen on the \npublic\n directory, launch the builtin server of PHP:\n\n\n$ cd /path/to/your/folder/public \n php -S blogbee.dev:8000\n\n\n\nAnd you should see the first installation step of BackBee (access \nhttp://localhost:8000/install.php\n) in a web browser:\n\n\n\n\nYou need to create \ncache\n and \nlog\n folders with the correct rights, then you can refresh the page and access to the \nsecond step\n of the installer.\n\n\n\n\nIf required, check the \nrepository/Config\n folder rights and then proceed with the \nthird\n step.\n\n\nYou need to set your database settings. If you use a different database engine than MySQL or MariaDB, set the correct driver else you have nothing to change, only fill the fields \ndatabase name\n, \nusername\n and \npassword\n.\n\n\n\n\nYou also need to define your super admin user, fill the credentials then save and continue to the \nfourth\n step.\n\n\n\n\nBackBee Installer creates and populates the database, fill the last information to complete the installation process: the \nsite_name\n and the \ndomain\n.\n\n\n\n\nYou are done: BackBee gives you the \nApache\n or \nNginx\n configuration you have to set to be able to use BackBee on the chosen domain.\n\n\n\n\n\n\nWhen you have set your web server, access the site by going to \nhttp://blogbee.dev\n.\n\n\nIf everything is correctly installed, you should see the BackBee welcome message:\n\n\n\n\n\n\nIf you can't see BackBee welcome message, check both \ncache\n and \nlog\n folders have the correct rights.\n\n\n\n\nYou can even connect to the \"Edition mode\", press  \nCTRL + ALT + B\n to show the login dialog. Note that we created a super admin user for you with login (=admin) and password (=admin).\n\n\n\n\nFinal thoughts\n\n\nWell, time is over! Even if we have not yet started talking about BackBee, we did setup a solid development environment and we are ready to start coding.\n\n\nTomorrow, we will unveil what the application will do and talk about the requirements we need to implement for \nBlogBee\n.", 
            "title": "Day 1: Installation of BackBee"
        }, 
        {
            "location": "/day1/#day-1-project-start", 
            "text": "", 
            "title": "Day 1 : Project start"
        }, 
        {
            "location": "/day1/#introduction", 
            "text": "BackBee  is an open source Content Management System (CMS) project built on top of Symfony Components and Doctrine 2.  This tutorial describes the creation of real web application, we will say more on day 2 about the application and features we expect to be implemented.\nThis kind of site is very popular and very easy to build with BackBee CMS, for instance you should take a look at  Medium .  This goal is to demonstrate that BackBee can be used to make websites with style and little efforts.  Each day of this tutorial is meant to last between one and two hours, and will be the occasion to learn BackBee by coding a real website, from start to finish. Every day, new features will be added to the application, and we'll take advantage of this development to introduce you to new BackBee functionalities as well as good practices in web development.  This tutorial is also inspired by the  so famous Jobeet , the book to learn  symfony 1  which describes how to build a business jobs application.", 
            "title": "Introduction"
        }, 
        {
            "location": "/day1/#what-for-today", 
            "text": "The objective of this day is to setup the environment and install the CMS. At the end of the day we expect to see the \"Hello world\" from BackBee.  We assume you have basic knowledge of PHP5, Apache or Nginx and MySQL.", 
            "title": "What for today?"
        }, 
        {
            "location": "/day1/#prerequisites", 
            "text": "Before installing BackBee, you need to check you have everything installed and configured correctly. You should really care about this first day and follow all the steps required to check your configuration, this may easy your days further down the road.  Third party Software  First of all, you need to check that your computer has a friendly working environment for web development. At a minimum, you need a web server (Apache, for instance), a database engine (MySQL, PostgreSQL, SQLite, or any PDO-compatible database engine), and  PHP 5.4  or later.  At least, you need to install  git .  Also, you will need to install  Composer  the dependency manager for PHP.  Follow this link to install it if your are on  Linux/Unix based OS  (like ubuntu or Mac OS X), Composer is also available on  Windows system .  In a command line interface, check if  composer  is correctly installed:   Also, check your PHP version which should be 5.4 or greater.   Eventually, you need to set up a domain name in your operating system.\nOn Unix/Linux based OS, you can add it into  /etc/hosts  file, we will choose  blogbee.dev :  127.0.0.1   blogbee.dev  PHP extensions and configuration  You need to activate  mbstring ,  pdo_mysql  and  pdo_sqlite  extensions.\nThen you also need to set a correct date.timezone in your  php.ini  configuration file:  [Date]\ndate.timezone=Europe/Paris  Ok ! We can now launch the installation process.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/day1/#installation", 
            "text": "Open a command line interface and get BackBee:  $ composer create-project \"backbee/backbee-standard\" /path/to/your/folder \"1.0\" -n  Then on the  public  directory, launch the builtin server of PHP:  $ cd /path/to/your/folder/public   php -S blogbee.dev:8000  And you should see the first installation step of BackBee (access  http://localhost:8000/install.php ) in a web browser:   You need to create  cache  and  log  folders with the correct rights, then you can refresh the page and access to the  second step  of the installer.   If required, check the  repository/Config  folder rights and then proceed with the  third  step.  You need to set your database settings. If you use a different database engine than MySQL or MariaDB, set the correct driver else you have nothing to change, only fill the fields  database name ,  username  and  password .   You also need to define your super admin user, fill the credentials then save and continue to the  fourth  step.   BackBee Installer creates and populates the database, fill the last information to complete the installation process: the  site_name  and the  domain .   You are done: BackBee gives you the  Apache  or  Nginx  configuration you have to set to be able to use BackBee on the chosen domain.    When you have set your web server, access the site by going to  http://blogbee.dev .  If everything is correctly installed, you should see the BackBee welcome message:    If you can't see BackBee welcome message, check both  cache  and  log  folders have the correct rights.   You can even connect to the \"Edition mode\", press   CTRL + ALT + B  to show the login dialog. Note that we created a super admin user for you with login (=admin) and password (=admin).", 
            "title": "Installation"
        }, 
        {
            "location": "/day1/#final-thoughts", 
            "text": "Well, time is over! Even if we have not yet started talking about BackBee, we did setup a solid development environment and we are ready to start coding.  Tomorrow, we will unveil what the application will do and talk about the requirements we need to implement for  BlogBee .", 
            "title": "Final thoughts"
        }, 
        {
            "location": "/day2/", 
            "text": "Day 2: Bootstrap of BlogBee project\n\n\nIn the last episode:\n\n\n\n\nDay 1: Setup and install BackBee\n\n\n\n\nIntroduction\n\n\nToday is about the project specifications.\n\n\nWhat for today?\n\n\nWe will list the user stories to complete in order to realize the application.\nWe will also make the functional mockups and make nice templates with Bootstrap 3 frontend framework.\n\n\n\n\nNotice: this tutorial is \nnot\n about learn Bootstrap3 css framework, but BackBee: if you don't know the framework, you can access \nBootstrap documentation here\n.\n\n\n\n\nWhat is BlogBee?\n\n\nBlogBee is an Open-Source blog-publishing platform software that only does one thing, but does it well. It is easy to use, customize, extend, and embed into your website. It supports user and content management out of the box, and of course uses the latest Web technologies to enhance user experience.\n\n\nBlogBee is inspired by the famous \nMedium website\n.\n\n\nUser stories\n\n\nWe will have 3 types of users:\n\n\n\n\nAdmins: they can access to the admin panel and manage users and articles\n\n\nUsers: logged users can write an article, and manage their own account\n\n\nGuests: they can comment on articles and/or share them through social networks\n\n\n\n\nHomepage\n\n\nStory HP1: On the homepage, any user can see the latest and top articles\n\n\nOn the BlogBee homepage a user should see a list of 3 recent active articles.\nShe also can see the 3 first top articles based on the number of readings.\n\n\nStory HP2: On the homepage, any user can see the top contributors list\n\n\nOn the BlogBee homepage, a user should see a list of actual top contributors based on the number of articles they have published on the platform.\n\n\nStory HP3: On the homepage, any user can connect to her account and/or register\n\n\nOn the BlogBee homepage, a guest can connect or register to the platform. If connected she can access her account management page.\n\n\nStory HP4: On the homepage, any user can filter the lists of article by category\n\n\nOn the BlogBee homepage, a user can filter the articles displayed by category (\"keyword\").\n\n\nAnd the following mockups:\n\n\nHome page\n\n\n\n\nLogin feature on Home page\n\n\n\n\nArticle page\n\n\nStory AP1: On the article page, any user can see the article and the author profile\n\n\nOn the BlogBee article page, a user can see the full content article, with a picture header if available.\nOn the right side, a user can see the author profile with picture if available and full name.\n\n\nStory AP2: On the article page, any user can comment an article\n\n\nOn the BlogBee article page, any guest can comment the article or share it on social networks. We can use an external Comment system like \nDisqus\n.\n\n\nAnd the following mockup:\n\n\n\n\nAuthor page\n\n\nStory AUP1: On the author page, any user should access author information\n\n\nOn the BlogBee author page, any visitor should access:\n\n\n\n\nAuthor picture and description if available\n\n\nAuthor full name\n\n\nLatest articles from this author\n\n\n\n\nAnd the following mockup:\n\n\n\n\nAccount management page\n\n\nStory AM1: On the account page, any logged user can update her information\n\n\nOn the BlogBee account management page, any logged user can update her information:\n\n\n\n\nfull name\n\n\ndescription\n\n\npicture\n\n\n\n\nAnd the following (last) mockup:\n\n\n\n\nWhat should it look like?\n\n\nLearning Bootstrap 3 front integration is out of scope of this tutorial, but to ease the following of this tutorial we will provide you a complete design available \nhere\n.\n\n\n\n\nArchive can be downloaded here in the \ngithub repository\n.\n\n\nFinal thoughts\n\n\nWell, time is over! Even if we have not yet started talking about BackBee, we have defined the features of our application and designed it using Bootstrap 3.\n\n\nTomorrow, we will start coding to integrate our static pages into BackBee and let the magic and interactivity happen.", 
            "title": "Day 2: What is BlogBee"
        }, 
        {
            "location": "/day2/#day-2-bootstrap-of-blogbee-project", 
            "text": "In the last episode:   Day 1: Setup and install BackBee", 
            "title": "Day 2: Bootstrap of BlogBee project"
        }, 
        {
            "location": "/day2/#introduction", 
            "text": "Today is about the project specifications.", 
            "title": "Introduction"
        }, 
        {
            "location": "/day2/#what-for-today", 
            "text": "We will list the user stories to complete in order to realize the application.\nWe will also make the functional mockups and make nice templates with Bootstrap 3 frontend framework.   Notice: this tutorial is  not  about learn Bootstrap3 css framework, but BackBee: if you don't know the framework, you can access  Bootstrap documentation here .", 
            "title": "What for today?"
        }, 
        {
            "location": "/day2/#what-is-blogbee", 
            "text": "BlogBee is an Open-Source blog-publishing platform software that only does one thing, but does it well. It is easy to use, customize, extend, and embed into your website. It supports user and content management out of the box, and of course uses the latest Web technologies to enhance user experience.  BlogBee is inspired by the famous  Medium website .", 
            "title": "What is BlogBee?"
        }, 
        {
            "location": "/day2/#user-stories", 
            "text": "We will have 3 types of users:   Admins: they can access to the admin panel and manage users and articles  Users: logged users can write an article, and manage their own account  Guests: they can comment on articles and/or share them through social networks   Homepage  Story HP1: On the homepage, any user can see the latest and top articles  On the BlogBee homepage a user should see a list of 3 recent active articles.\nShe also can see the 3 first top articles based on the number of readings.  Story HP2: On the homepage, any user can see the top contributors list  On the BlogBee homepage, a user should see a list of actual top contributors based on the number of articles they have published on the platform.  Story HP3: On the homepage, any user can connect to her account and/or register  On the BlogBee homepage, a guest can connect or register to the platform. If connected she can access her account management page.  Story HP4: On the homepage, any user can filter the lists of article by category  On the BlogBee homepage, a user can filter the articles displayed by category (\"keyword\").  And the following mockups:  Home page   Login feature on Home page   Article page  Story AP1: On the article page, any user can see the article and the author profile  On the BlogBee article page, a user can see the full content article, with a picture header if available.\nOn the right side, a user can see the author profile with picture if available and full name.  Story AP2: On the article page, any user can comment an article  On the BlogBee article page, any guest can comment the article or share it on social networks. We can use an external Comment system like  Disqus .  And the following mockup:   Author page  Story AUP1: On the author page, any user should access author information  On the BlogBee author page, any visitor should access:   Author picture and description if available  Author full name  Latest articles from this author   And the following mockup:   Account management page  Story AM1: On the account page, any logged user can update her information  On the BlogBee account management page, any logged user can update her information:   full name  description  picture   And the following (last) mockup:", 
            "title": "User stories"
        }, 
        {
            "location": "/day2/#what-should-it-look-like", 
            "text": "Learning Bootstrap 3 front integration is out of scope of this tutorial, but to ease the following of this tutorial we will provide you a complete design available  here .   Archive can be downloaded here in the  github repository .", 
            "title": "What should it look like?"
        }, 
        {
            "location": "/day2/#final-thoughts", 
            "text": "Well, time is over! Even if we have not yet started talking about BackBee, we have defined the features of our application and designed it using Bootstrap 3.  Tomorrow, we will start coding to integrate our static pages into BackBee and let the magic and interactivity happen.", 
            "title": "Final thoughts"
        }, 
        {
            "location": "/day3/", 
            "text": "Day 3: the Content Model\n\n\nIn the last episodes:\n\n\n\n\nDay1: Setup and install BackBee\n\n\nDay2: Bootstrap of BlogBee project\n\n\n\n\nIntroduction\n\n\nContent model of BackBee is one of the most difficult part to understand.\nFortunately, the Content management system is highly inspired from standards with the aim to be fully compatible with \nPHP Content Repository\n API.\n\n\nWhat for today?\n\n\nAs detailed in \nDay 2\n in AP stories, any User should be able to create an article, today we will\nadd the minimal files and configurations to allow any user to set up an article.\n\n\nBackBee Content model\n\n\nWhat is the PHP Content Repository?\n\n\nThe PHP Content Repository is an adaptation of the Java Content Repository (\nJCR\n) standard, an open API specification defined in \nJSR-283\n.\nThe API defines how to handle hierarchical semi-structured data in a consistent way.\n\n\nThe typical use case is content management systems. PHPCR combines the best of document-oriented databases (weak structured data) and of XML databases (hierarchical trees). On top of that, it adds useful features like searching, versioning, access control and locking on top of it.\n\n\nBackBee Content Management System\n follows most of the \nPHP Content Repository\n recommendations.\n\n\nIf you want to learn more about the PHPCR, you can read the \nonline documentation\n or take a look at this \nlecture from one of the PHPCR contributors\n which provides a good understanding of the whole system.\n\n\nBackBee Content Management System\n\n\nBackBee Content Management System provides the following features:\n\n\n\n\nAccess hierarchical tree\n\n\nAccess by UUID\n\n\nNode search\n\n\nVersioning\n\n\nXML import \n export\n\n\nSecured Access\n\n\n\n\nSite \n Pages\n\n\nA website can have multiple pages, and a page can have a parent page and a collection of \"children\" pages, ordered by \"level\" in the tree.\n\n\nA page can have a parent (if not, the page is considered as a \"root page\"):\n\n\n\n\nLayout\n\n\nWe have seen on \nDay 3\n the layouts, each page has a layout and all the contents are linked to the layout.\nThe reality is a little bit complex, because a page has a ContentSet (this is a special Content type: for now let's say this is an ordered collection of Content) which contains all the contents of the page.\n\n\nWhen we need to render a web page, the \nRenderer\n:\n\n\n\n\nChecks if the Page ContentSet is not \nnull\n\n\nGets all the zones of the Page layout (1 column, 2 columns like the layouts defined on \nDay 3\n)\n\n\nLoops on the contents of the ContentSet and \nputs the content\n on the correct column (or \"zone\")\n\n\n\n\nTo conclude, \nLayout\n is used by the \nRenderer\n to put the correct content on the zones defined in the layout.\n\n\nContent Element\n\n\nA content element is a very simple yaml file, which has \nproperties\n and \nelements\n.\nFor instance, this is the actual representation a \ntext\n element:\n\n\n# BackBuilder\\ClassContent\\Element\\text.yml\ntext:\n  properties:\n    name: Text\n    description: A simple text input\n  elements:\n    value: !!scalar\n\n\n\n\nA content element is not selectable in BackBee out of the box, in order to use it\nyou need to embed it into a Content. Notice a content element can have parameters too,\nbut it's not mandatory.\n\n\nList of native content elements in BackBee:\n * \ntext\n\n   * \ndate\n\n   * \nselect\n\n * \nfile\n\n   * \nattachment\n\n   * \nimage\n\n * \nkeyword\n\n * \nlink\n\n\nContent\n\n\nThe contents are also stored in an hierarchical tree, we can describe them\nas a list of content elements (\nBackBee\\ClassContent\\Element\n).\n\n\nContents of your application are stored inside \nrepository\\ClassContent\n folder.\n\n\nHow to build a Content ?\n\n\nFor instance, this is the configuration for \nParagraph\n content we want to allow users to use\nin an article.\n\n\n# /repository/ClassContent/Article/Paragraph.yml\nparagraph:\n    properties:\n        name: Paragraph\n        description: Paragraph\n        category: [Article]\n    elements:\n        body:\n            type: BackBuilder\\ClassContent\\Element\\text\n\n\n\n\nA \nparagraph\n is an extend of the \ntext\n element we have seen before, the interesting parts\nof this configuration are:\n\n\n\n\ncategory\n: allow the content to be displayed on \"Edition mode\"\n\n\ntype\n: the related class, can be \"scalar\", \"array\" or the fully qualified class name (FQCN) which is an instance of \nClassContent\n?\n\n\n\n\nFinally, this is the final rendering of this Content inside BackBee after you drag \n dropped the paragraph\ninside the \"Article\" block.\n\n\n\n\nContentSet\n\n\nA ContentSet is a content which accepts an ordered collection of contents.\n\n\nArticle implementation\n\n\nAll the contents created by the developer are located in the \n/repository/ClassContent/\n repository.\nToday, we will focus on the \narticle\n creation.\n\n\nReminder, an article consists of:\n\n\n\n\nA title\n\n\nA picture\n\n\nAn abstract\n\n\nA body which is a rich content\n\n\n\n\nThe \narticle\n content configuration will be set to multiple YAML files to allow reuse.\n\n\nYaml files\n\n\nrepository/\n    ClassContent/\n        Article.yml\n        Article/\n            Body.yml\n            Paragraph.yml\n            Picture.yml\n            ColumnDivider.yml\n\n\n\n\n# /repository/ClassContent/Article/Paragraph.yml\nparagraph:\n    properties:\n        name: Paragraph\n        description: Paragraph\n        category: [Article]\n    elements:\n        body:\n            type: BackBee\\ClassContent\\Element\\text\n\n\n\n\n# /repository/ClassContent/Article/Picture.yml\npicture:\n    properties:\n        name: Article picture\n        description: A media image\n        category: [Article]\n    elements:\n        title:\n            type: BackBee\\ClassContent\\Element\\Text\n        image:\n            type: BackBee\\ClassContent\\Element\\Image\n\n\n\n\n# /repository/ClassContent/Article/ColumnDivider.yml\ncolumn_divider:\n    properties:\n        name: \nColumn Divider\n\n        description: \n\n        category: [Article]\n    elements:\n        left:\n            type: \\BackBee\\ClassContent\\Container\\OneColumn\n        right:\n            type: \\BackBee\\ClassContent\\Container\\OneColumn\n\n\n\n\n# /repository/ClassContent/Article.yml\narticle:\n    properties:\n        name: Article\n        description: \nAn article contains title, abstract, main image and a customizable body\n\n        category: [article]\n    elements:\n        title:\n            type: BackBee\\ClassContent\\Element\\Text\n        abstract:\n            type: BackBee\\ClassContent\\Text\\Paragraph\n        body:\n            type: BackBee\\ClassContent\\Article\\Body\n        image:\n            type: BackBee\\ClassContent\\Media\\Image\n\n\n\n\nAfter adding this configuration file, reconnect to Edition Mode and create a new page with \"Article\" layout.\n\n\nAccess to this new page and look at the result:\n\n\n\n\nFinal thoughts\n\n\nWell, time is over!\n\n\nWe now have a better understanding on how BackBee manage its contents, tomorrow we will explore more the Editor mode\nand we will go further on the \"Content\" model of BackBee.", 
            "title": "Day 3: Introduction to Content model"
        }, 
        {
            "location": "/day3/#day-3-the-content-model", 
            "text": "In the last episodes:   Day1: Setup and install BackBee  Day2: Bootstrap of BlogBee project", 
            "title": "Day 3: the Content Model"
        }, 
        {
            "location": "/day3/#introduction", 
            "text": "Content model of BackBee is one of the most difficult part to understand.\nFortunately, the Content management system is highly inspired from standards with the aim to be fully compatible with  PHP Content Repository  API.", 
            "title": "Introduction"
        }, 
        {
            "location": "/day3/#what-for-today", 
            "text": "As detailed in  Day 2  in AP stories, any User should be able to create an article, today we will\nadd the minimal files and configurations to allow any user to set up an article.", 
            "title": "What for today?"
        }, 
        {
            "location": "/day3/#backbee-content-model", 
            "text": "What is the PHP Content Repository?  The PHP Content Repository is an adaptation of the Java Content Repository ( JCR ) standard, an open API specification defined in  JSR-283 .\nThe API defines how to handle hierarchical semi-structured data in a consistent way.  The typical use case is content management systems. PHPCR combines the best of document-oriented databases (weak structured data) and of XML databases (hierarchical trees). On top of that, it adds useful features like searching, versioning, access control and locking on top of it.  BackBee Content Management System  follows most of the  PHP Content Repository  recommendations.  If you want to learn more about the PHPCR, you can read the  online documentation  or take a look at this  lecture from one of the PHPCR contributors  which provides a good understanding of the whole system.  BackBee Content Management System  BackBee Content Management System provides the following features:   Access hierarchical tree  Access by UUID  Node search  Versioning  XML import   export  Secured Access   Site   Pages  A website can have multiple pages, and a page can have a parent page and a collection of \"children\" pages, ordered by \"level\" in the tree.  A page can have a parent (if not, the page is considered as a \"root page\"):   Layout  We have seen on  Day 3  the layouts, each page has a layout and all the contents are linked to the layout.\nThe reality is a little bit complex, because a page has a ContentSet (this is a special Content type: for now let's say this is an ordered collection of Content) which contains all the contents of the page.  When we need to render a web page, the  Renderer :   Checks if the Page ContentSet is not  null  Gets all the zones of the Page layout (1 column, 2 columns like the layouts defined on  Day 3 )  Loops on the contents of the ContentSet and  puts the content  on the correct column (or \"zone\")   To conclude,  Layout  is used by the  Renderer  to put the correct content on the zones defined in the layout.  Content Element  A content element is a very simple yaml file, which has  properties  and  elements .\nFor instance, this is the actual representation a  text  element:  # BackBuilder\\ClassContent\\Element\\text.yml\ntext:\n  properties:\n    name: Text\n    description: A simple text input\n  elements:\n    value: !!scalar  A content element is not selectable in BackBee out of the box, in order to use it\nyou need to embed it into a Content. Notice a content element can have parameters too,\nbut it's not mandatory.  List of native content elements in BackBee:\n *  text \n   *  date \n   *  select \n *  file \n   *  attachment \n   *  image \n *  keyword \n *  link  Content  The contents are also stored in an hierarchical tree, we can describe them\nas a list of content elements ( BackBee\\ClassContent\\Element ).  Contents of your application are stored inside  repository\\ClassContent  folder.  How to build a Content ?  For instance, this is the configuration for  Paragraph  content we want to allow users to use\nin an article.  # /repository/ClassContent/Article/Paragraph.yml\nparagraph:\n    properties:\n        name: Paragraph\n        description: Paragraph\n        category: [Article]\n    elements:\n        body:\n            type: BackBuilder\\ClassContent\\Element\\text  A  paragraph  is an extend of the  text  element we have seen before, the interesting parts\nof this configuration are:   category : allow the content to be displayed on \"Edition mode\"  type : the related class, can be \"scalar\", \"array\" or the fully qualified class name (FQCN) which is an instance of  ClassContent ?   Finally, this is the final rendering of this Content inside BackBee after you drag   dropped the paragraph\ninside the \"Article\" block.   ContentSet  A ContentSet is a content which accepts an ordered collection of contents.", 
            "title": "BackBee Content model"
        }, 
        {
            "location": "/day3/#article-implementation", 
            "text": "All the contents created by the developer are located in the  /repository/ClassContent/  repository.\nToday, we will focus on the  article  creation.  Reminder, an article consists of:   A title  A picture  An abstract  A body which is a rich content   The  article  content configuration will be set to multiple YAML files to allow reuse.  Yaml files  repository/\n    ClassContent/\n        Article.yml\n        Article/\n            Body.yml\n            Paragraph.yml\n            Picture.yml\n            ColumnDivider.yml  # /repository/ClassContent/Article/Paragraph.yml\nparagraph:\n    properties:\n        name: Paragraph\n        description: Paragraph\n        category: [Article]\n    elements:\n        body:\n            type: BackBee\\ClassContent\\Element\\text  # /repository/ClassContent/Article/Picture.yml\npicture:\n    properties:\n        name: Article picture\n        description: A media image\n        category: [Article]\n    elements:\n        title:\n            type: BackBee\\ClassContent\\Element\\Text\n        image:\n            type: BackBee\\ClassContent\\Element\\Image  # /repository/ClassContent/Article/ColumnDivider.yml\ncolumn_divider:\n    properties:\n        name:  Column Divider \n        description:  \n        category: [Article]\n    elements:\n        left:\n            type: \\BackBee\\ClassContent\\Container\\OneColumn\n        right:\n            type: \\BackBee\\ClassContent\\Container\\OneColumn  # /repository/ClassContent/Article.yml\narticle:\n    properties:\n        name: Article\n        description:  An article contains title, abstract, main image and a customizable body \n        category: [article]\n    elements:\n        title:\n            type: BackBee\\ClassContent\\Element\\Text\n        abstract:\n            type: BackBee\\ClassContent\\Text\\Paragraph\n        body:\n            type: BackBee\\ClassContent\\Article\\Body\n        image:\n            type: BackBee\\ClassContent\\Media\\Image  After adding this configuration file, reconnect to Edition Mode and create a new page with \"Article\" layout.  Access to this new page and look at the result:", 
            "title": "Article implementation"
        }, 
        {
            "location": "/day3/#final-thoughts", 
            "text": "Well, time is over!  We now have a better understanding on how BackBee manage its contents, tomorrow we will explore more the Editor mode\nand we will go further on the \"Content\" model of BackBee.", 
            "title": "Final thoughts"
        }, 
        {
            "location": "/day4/", 
            "text": "Day 4: the BackBee Edition mode\n\n\nIn the last episodes:\n\n\n\n\nDay1: Setup and install BackBee\n\n\nDay2: Bootstrap of BlogBee project\n\n\nDay3: Introduction to Content model\n\n\n\n\nIntroduction\n\n\nThe Content model is complex to understand without practical examples. As a user manipulates contents through the toolbar, we will do the link between our files and configurations and the toolbar features activated and displayed. This way, you will understand how to provide features to your final users.\n\n\nWhat for today?\n\n\nIn \nDay 3\n, we added an Article content and this is great but you still can't edit it.\nToday, we will also discover the different \"modes\" of the toolbar and then we will complete our configuration files in order to allow our final users to create and edit articles.\n\n\nBackBee Edition mode\n\n\nDiscover the \"toolbar\"\n\n\nThe first time you connect into \nEdition mode\n you may be a bit lost due to multiple buttons and tabs.\n\n\n\n\n\n\nthe \nUser settings selector\n: to access settings and disconnect from Edition mode.\n\n\nthe \nState manager selector\n: to save, apply or cancel the modifications done to your contents.\n\n\nthe \nMode selector\n:  this allows to switch between modes of the BackBee editor.\n\n\nonly in Edit mode\n:  the \nPanel selector\n to choose which kind of content to edit.\n\n\n\n\nthe \nUser management\n mode\n\n\nAccess the User management panel to access users and groups:\n\n\n\n\nYou can search for an user with the search form, manage an user, create new ones, or add them to a group.\n\n\nWhat is an user group ?\n\n\nIn BackBee the authorisations can be very precises and specifics.\nOut of box, we provide three groups with the following rights on contents:\n\n\n\n\nAdministrators\n: users of this group have all rights on the website and its features;\n\n\nValidators\n: users of this group can create, edit and publish;\n\n\nContributors\n: users of this group can only create and edit but not publish. \n\n\n\n\nthe \nEdit\n mode\n\n\nWhen you login to BackBee Edition mode, you start in \nEdit mode\n:\n\n\n\n\nThis mode is contextual and strongly depends on what content is selected.\n\n\nthe \nPage\n panel\n\n\nthe \nPage\n panel is obviously used to manage pages, from hierarchy to SEO properties.\n\n\n\n\nYou can change the status of a page: if set to offline, non logged users can't access it. You can also schedule it to publish and archive it.\n\n\nAlso, if you click on the \"Sitemap\" link you access the page tree we have introduced on \nDay 3\n, and can easily reorganize page order and hierarchy.\n\n\nFor example, let's create a page.\nClick on \"New page\" and fill the form with \"article\" as title and \"Article\" as Template. \nYou can either do this by creating it right-clicking on Home page or using the Tools drop-down menu.\n\nThen, click on Save button and take a look at the \"Sitemap widget\".\n\n\n\n\nThe article page is offline, has a red hatched logo, an online page (like the \nroot\n Home page) is white. You can manage your pages through the widget and/or in the \nPage\n panel.\n\n\nthe \nBoxes\n panel\n\n\nYou will probably only use this panel when you build your website.\nDouble-click on \"article\" in the \"Sitemap widget\" to access the new page created. Then switch to the \nBoxes\n panel:\n\n\n\n\nAnd you retrieve the blocks created in the \nrepository\\ClassContent\\article.yml\n file.\n\n\nFor example, click on the \"Upload picture\":\n\n\n\n\nIn the \nbreadcrumb\n, you can see \nContentSet \n article \n Media image\n.\nIf you take a look at your yaml file, you can see that an image has an image element, which is a \nBackBee\\ClassContent\\Media\\image\n class: good.\n\n\nYou can see also that Boxes are organized by \ncategory\n. If you click on \nArticle\n category you will find all the contents we created on \nDay 4\n with the category \"Article\": this is how BackBee orders and allows content to be used.\n\n\nEach content must have a category, but sometimes you may need to deactivate a content because the final user shouldn't manipulate it.\n\n\nYou can use the \"!\" operator to filter contents, for instance we don't want the final user to add other article bodies to an article.\n\n\n# /repository/ClassContent/Article/Body.yml\nbody:\n  extends: \\BackBee\\ClassContent\\ContentSet\n  properties:\n    category: [!Article]\n\n\n\n\nAnd now, \nbody\n is not part of available contents.\n\n\nthe \nContent\n panel\n\n\nThis is the most used panel of BackBee, able to manipulable all editable blocks. You may wonder how to make a block editable. Usually, this is a problem solved by Yaml configuration of the block.\n\n\nLet's assume you want to let users edit the title of an article:\n\n\narticle:\n    properties:\n        name: Article\n        description: \"An article contains title, abstract, main image and a customizable body\"\n        category: [article]\n    elements:\n        title:\n            type: BackBee\\ClassContent\\Element\\Text\n        body:\n            type: BackBee\\ClassContent\\Article\\Body\n    parameters:\n        accept: [BackBee\\ClassContent\\Text\\Paragraph]\n\n\n\nAs you can see, we have added a \nparameter\n to the article title configuration. Each parameter has a type and a value.\n\n\n\n\naccept\n:  \"lite\" is a configuration tree key in ``/repository/Config/rteconfig.yml, we will talk about aloha configuration later\n\n\neditable\n: this is explicit, we are now allowed to edit the title\n\n\n\n\n\n\nthe \nPlugins\n mode\n\n\nIn BackBee, \nBundles\n are mostly considered \"plugins\". All the available bundles are displayed in this view.\nNotice that \nBackBee Standard edition\n comes with a DemoBundle, to help you build your own bundles.\n\n\n\n\nFor example, \nDemoBundle\n provides a \nClassContent\n called \nblock demo\n that you will find inside \nDemo\n category in \nBoxes\n panel. This bundle also provide a sample on how to make bundle manageable from the toolbar.\n\n\nIt is the \nblock demo\n from \nDemo\n category in \"Boxes\" panel.\n\n\nWe will learn more about bundles in the next days.\n\n\nArticle model improvements\n\n\nComplete our Article model\n\n\nThis is the configuration we will use for our Article model:\n\n\narticle:\n    properties:\n        name: Article\n        description: \nAn article contains title, abstract, main image and a customizable body\n\n        category: [article]\n    elements:\n        title:\n            type: BackBuilder\\ClassContent\\Element\\text\n            label: Title\n            # default value\n            default:\n                value: Your title here...\n            # set the max of content you can set\n            # an article has only one title\n            maxentry: 1\n\n        abstract:\n            type: BackBee\\ClassContent\\Text\\Paragraph\n            label: Abstract\n            default:\n                value: Your abstract here...\n            maxentry: 1\n        body:\n            type: BackBee\\ClassContent\\Article\\Body\n        image:\n            type: BackBee\\ClassContent\\Media\\Image\n\n\n\n\n\nThe complete configuration of contents we have defined in \nDay 3\n are stored in the \napplication github repository\n.\n\n\nBonus: manage your urls\n\n\nBackBee has a lot of features and today we will speak about urls. This is a very common need, that is, to have a total control on the urls generated by pages, mainly for search engine optimization (SEO).\n\n\nUrls are managed by Content and by configuration.\n\n\nAdd a new file in \nrepository/Config/\n folder and name it \nrewriting.yml\n.\n\n\nscheme:\n  _content_:\n    article: $ancestor[1]/$title\n\n\n\n\nNow make an update on your article (update the status of your article for instance),\nthen \"Save\" your modifications and BackBee will ask you to reload the browser page.\n\n\nAnd the url will be updated: \nnotice you need to update each existing article in order to apply the new url pattern\n.\n\n\nFinal thoughts\n\n\nWell, time is over!\n\n\nWe have seen a lot of features today, and we are now skilled enough to create any simple website you want.\nWe are able to integrate layouts and templates, to configure contents related to business and make them dynamic and editable by users.\n\n\nThe next days, we will go further on the BackBee discovery from bundle creation to events listeners and give you keys to finish your own BlogBee application!", 
            "title": "Day 4: the BackBee Edition mode"
        }, 
        {
            "location": "/day4/#day-4-the-backbee-edition-mode", 
            "text": "In the last episodes:   Day1: Setup and install BackBee  Day2: Bootstrap of BlogBee project  Day3: Introduction to Content model", 
            "title": "Day 4: the BackBee Edition mode"
        }, 
        {
            "location": "/day4/#introduction", 
            "text": "The Content model is complex to understand without practical examples. As a user manipulates contents through the toolbar, we will do the link between our files and configurations and the toolbar features activated and displayed. This way, you will understand how to provide features to your final users.", 
            "title": "Introduction"
        }, 
        {
            "location": "/day4/#what-for-today", 
            "text": "In  Day 3 , we added an Article content and this is great but you still can't edit it.\nToday, we will also discover the different \"modes\" of the toolbar and then we will complete our configuration files in order to allow our final users to create and edit articles.", 
            "title": "What for today?"
        }, 
        {
            "location": "/day4/#backbee-edition-mode", 
            "text": "", 
            "title": "BackBee Edition mode"
        }, 
        {
            "location": "/day4/#discover-the-toolbar", 
            "text": "The first time you connect into  Edition mode  you may be a bit lost due to multiple buttons and tabs.    the  User settings selector : to access settings and disconnect from Edition mode.  the  State manager selector : to save, apply or cancel the modifications done to your contents.  the  Mode selector :  this allows to switch between modes of the BackBee editor.  only in Edit mode :  the  Panel selector  to choose which kind of content to edit.", 
            "title": "Discover the \"toolbar\""
        }, 
        {
            "location": "/day4/#the-user-management-mode", 
            "text": "Access the User management panel to access users and groups:   You can search for an user with the search form, manage an user, create new ones, or add them to a group.  What is an user group ?  In BackBee the authorisations can be very precises and specifics.\nOut of box, we provide three groups with the following rights on contents:   Administrators : users of this group have all rights on the website and its features;  Validators : users of this group can create, edit and publish;  Contributors : users of this group can only create and edit but not publish.", 
            "title": "the User management mode"
        }, 
        {
            "location": "/day4/#the-edit-mode", 
            "text": "When you login to BackBee Edition mode, you start in  Edit mode :   This mode is contextual and strongly depends on what content is selected.  the  Page  panel  the  Page  panel is obviously used to manage pages, from hierarchy to SEO properties.   You can change the status of a page: if set to offline, non logged users can't access it. You can also schedule it to publish and archive it.  Also, if you click on the \"Sitemap\" link you access the page tree we have introduced on  Day 3 , and can easily reorganize page order and hierarchy.  For example, let's create a page.\nClick on \"New page\" and fill the form with \"article\" as title and \"Article\" as Template.  You can either do this by creating it right-clicking on Home page or using the Tools drop-down menu. \nThen, click on Save button and take a look at the \"Sitemap widget\".   The article page is offline, has a red hatched logo, an online page (like the  root  Home page) is white. You can manage your pages through the widget and/or in the  Page  panel.  the  Boxes  panel  You will probably only use this panel when you build your website.\nDouble-click on \"article\" in the \"Sitemap widget\" to access the new page created. Then switch to the  Boxes  panel:   And you retrieve the blocks created in the  repository\\ClassContent\\article.yml  file.  For example, click on the \"Upload picture\":   In the  breadcrumb , you can see  ContentSet   article   Media image .\nIf you take a look at your yaml file, you can see that an image has an image element, which is a  BackBee\\ClassContent\\Media\\image  class: good.  You can see also that Boxes are organized by  category . If you click on  Article  category you will find all the contents we created on  Day 4  with the category \"Article\": this is how BackBee orders and allows content to be used.  Each content must have a category, but sometimes you may need to deactivate a content because the final user shouldn't manipulate it.  You can use the \"!\" operator to filter contents, for instance we don't want the final user to add other article bodies to an article.  # /repository/ClassContent/Article/Body.yml\nbody:\n  extends: \\BackBee\\ClassContent\\ContentSet\n  properties:\n    category: [!Article]  And now,  body  is not part of available contents.  the  Content  panel  This is the most used panel of BackBee, able to manipulable all editable blocks. You may wonder how to make a block editable. Usually, this is a problem solved by Yaml configuration of the block.  Let's assume you want to let users edit the title of an article:  article:\n    properties:\n        name: Article\n        description: \"An article contains title, abstract, main image and a customizable body\"\n        category: [article]\n    elements:\n        title:\n            type: BackBee\\ClassContent\\Element\\Text\n        body:\n            type: BackBee\\ClassContent\\Article\\Body\n    parameters:\n        accept: [BackBee\\ClassContent\\Text\\Paragraph]  As you can see, we have added a  parameter  to the article title configuration. Each parameter has a type and a value.   accept :  \"lite\" is a configuration tree key in ``/repository/Config/rteconfig.yml, we will talk about aloha configuration later  editable : this is explicit, we are now allowed to edit the title", 
            "title": "the Edit mode"
        }, 
        {
            "location": "/day4/#the-plugins-mode", 
            "text": "In BackBee,  Bundles  are mostly considered \"plugins\". All the available bundles are displayed in this view.\nNotice that  BackBee Standard edition  comes with a DemoBundle, to help you build your own bundles.   For example,  DemoBundle  provides a  ClassContent  called  block demo  that you will find inside  Demo  category in  Boxes  panel. This bundle also provide a sample on how to make bundle manageable from the toolbar.  It is the  block demo  from  Demo  category in \"Boxes\" panel.  We will learn more about bundles in the next days.", 
            "title": "the Plugins mode"
        }, 
        {
            "location": "/day4/#article-model-improvements", 
            "text": "", 
            "title": "Article model improvements"
        }, 
        {
            "location": "/day4/#complete-our-article-model", 
            "text": "This is the configuration we will use for our Article model:  article:\n    properties:\n        name: Article\n        description:  An article contains title, abstract, main image and a customizable body \n        category: [article]\n    elements:\n        title:\n            type: BackBuilder\\ClassContent\\Element\\text\n            label: Title\n            # default value\n            default:\n                value: Your title here...\n            # set the max of content you can set\n            # an article has only one title\n            maxentry: 1\n\n        abstract:\n            type: BackBee\\ClassContent\\Text\\Paragraph\n            label: Abstract\n            default:\n                value: Your abstract here...\n            maxentry: 1\n        body:\n            type: BackBee\\ClassContent\\Article\\Body\n        image:\n            type: BackBee\\ClassContent\\Media\\Image  The complete configuration of contents we have defined in  Day 3  are stored in the  application github repository .", 
            "title": "Complete our Article model"
        }, 
        {
            "location": "/day4/#bonus-manage-your-urls", 
            "text": "BackBee has a lot of features and today we will speak about urls. This is a very common need, that is, to have a total control on the urls generated by pages, mainly for search engine optimization (SEO).  Urls are managed by Content and by configuration.  Add a new file in  repository/Config/  folder and name it  rewriting.yml .  scheme:\n  _content_:\n    article: $ancestor[1]/$title  Now make an update on your article (update the status of your article for instance),\nthen \"Save\" your modifications and BackBee will ask you to reload the browser page.  And the url will be updated:  notice you need to update each existing article in order to apply the new url pattern .", 
            "title": "Bonus: manage your urls"
        }, 
        {
            "location": "/day4/#final-thoughts", 
            "text": "Well, time is over!  We have seen a lot of features today, and we are now skilled enough to create any simple website you want.\nWe are able to integrate layouts and templates, to configure contents related to business and make them dynamic and editable by users.  The next days, we will go further on the BackBee discovery from bundle creation to events listeners and give you keys to finish your own BlogBee application!", 
            "title": "Final thoughts"
        }
    ]
}